{% extends 'partials/base.html.twig' %}

{% block content %}
    <section class="section careers-hero"></section>
    <section class="section careers-page py-24 px-4">
        <div class="container md mx-auto">
        <h1 class="text-center">Join Our Team</h1>
        <article class="my-8">
            <h2 class="text-care-motion mb-4">What We Do</h2>
            <p>Care Access is delivering the future of medicine today. By uniting healthcare staff with centralized research operations and technology, we have built one of the nation’s largest clinical research companies. Care Access has grown rapidly through a revolutionary model that breaks down traditional barriers to clinical trials that limit participation among physicians and patients to 3%. By removing this bottleneck, Care Access is helping accelerate the approval and delivery of critical and life-saving therapies.</p>
        </article>
        <article class="my-8">
            <h2 class="text-care-motion mb-4">Who We Are</h2>
            <p>Care Access is delivering the future of medicine today. By uniting healthcare staff with centralized research operations and technology, we have built one of the nation’s largest clinical research companies. Care Access has grown rapidly through a revolutionary model that breaks down traditional barriers to clinical trials that limit participation among physicians and patients to 3%. By removing this bottleneck, Care Access is helping accelerate the approval and delivery of critical and life-saving therapies.</p>
            <p class="my-6">Join us for an opportunity to work with a team dedicated to this rewarding mission.</p>
            <p class="text-center"><a href="#" class="btn primary">See Our Groundbreaking Work on COVID-19</a></p>
        </article>
        <article class="my-16">
            <img src="/images/careers/jump-team.jpeg" />
        </article>
        <h3 class="text-xl text-center my-6">Open Positions</h3>
        <div>
            <script src="//cdnjs.cloudflare.com/ajax/libs/list.js/1.5.0/list.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
<div class="current-jobs">
<div id="new-list">
<div class="filters-container">
    <div id="lever-jobs-filter">
      <span class="filter-by">Filter by:</span>
      <select class="lever-jobs-filter-teams input-container a">
        <option value="" disabled selected>Team</option>
      </select>
      <select class="lever-jobs-filter-work-types input-container b">
        <option value="" disabled selected>Work Type</option>
      </select>
      <select class="lever-jobs-filter-locations input-container c">
        <option value="" disabled selected>City</option>
      </select>
      <a id="lever-clear-filters" style="display: none;">Clear filters</a>
    </div>
</div>
  <ul class="list">
  </ul>
  <div id="lever-no-results" style="display: none;">No results</div>
</div>
<div id='lever-jobs-container'></div>
</div>


<!-- ACCOUNT NAME IN HERE -->
<!-- ACCOUNT NAME IN HERE -->
<script type='text/javascript'>window.leverJobsOptions = {accountName: 'CareAccessResearch', includeCss: false};</script>
<!-- END ACCOUNT NAME IN HERE -->


<script type='text/javascript'>
 window.addEventListener('leverJobsRendered', function() {
     $(".lever-job").clone().appendTo("#new-list ul");
     var options = {
         valueNames: [
             'lever-job-title',
             { data: ['location'] },
             { data: ['department'] },
             { data: ['team'] },
             { data: ['work-type'] }
         ]
     };
     var jobList = new List('new-list', options);
     console.log("joblist", jobList);
     var locations = [];
     var departments = [];
     var teams = [];
     var workTypes = [];
     for (var i = 0; i < jobList.items.length; i++) {
         var item = jobList.items[i]._values;
         var location = item.location;
         if(jQuery.inArray(location, locations) == -1) {
             locations.push(location);
         }
         var department = item.department;
         if(jQuery.inArray(department, departments) == -1) {
             departments.push(department);
         }
         var team = item.team;
         if(jQuery.inArray(team, teams) == -1) {
             teams.push(team);
         }
         var workType = item["work-type"];
         if(jQuery.inArray(workType, workTypes) == -1) {
             workTypes.push(workType);
         }
     }
     locations.sort();
     departments.sort();
     teams.sort();
     workTypes.sort();
     for (var j = 0; j < locations.length; j++ ) {
         $( "#lever-jobs-filter .lever-jobs-filter-locations").append('<option>' + locations[j] + '</option>');
     }
     for (var j = 0; j < teams.length; j++ ) {
         $( "#lever-jobs-filter .lever-jobs-filter-teams").append('<option>' + teams[j] + '</option>');
     }
     for (var j = 0; j < workTypes.length; j++ ) {
         $( "#lever-jobs-filter .lever-jobs-filter-work-types").append('<option>' + workTypes[j] + '</option>');
     }
     function showFilterResults() {
         $('#new-list .list').show();
         $('#lever-jobs-container').hide();
     }
     function hideFilterResults() {
         $('#new-list .list').hide();
         $('#lever-jobs-container').show();
     }
     // Show the unfiltered list by default
     hideFilterResults();
     $('#lever-jobs-filter select').change(function(){
         var selectedFilters = {
             location: $('#lever-jobs-filter select.lever-jobs-filter-locations').val(),
             team: $('#lever-jobs-filter select.lever-jobs-filter-teams').val(),
             'work-type': $('#lever-jobs-filter select.lever-jobs-filter-work-types').val(),
         }
         //Filter the list
         jobList.filter(function(item) {
             var itemValue = item.values();
             // Check the itemValue against all filter properties (location, team, work-type).
             for (var filterProperty in selectedFilters) {
                 var selectedFilterValue = selectedFilters[filterProperty];
                 // For a <select> that has no option selected, JQuery's val() will return null.
                 // We only want to compare properties where the user has selected a filter option,
                 // which is when selectedFilterValue is not null.
                 if (selectedFilterValue !== null) {
                     if (itemValue[filterProperty] !== selectedFilterValue) {
                         // Found mismatch with a selected filter, can immediately exclude this item.
                         return false;
                     }
                 }
             }
             // This item passes all selected filters, include this item.
             return true;
         });
         //Show the 'no results' message if there are no matching results
         if (jobList.visibleItems.length >= 1) {
             $('#lever-no-results').hide();
         }
         else {
             $('#lever-no-results').show();
         }
         console.log("filtered?", jobList.filtered);
         $('#lever-clear-filters').show();
         //Show the list with filtered results
         showFilterResults();
     });
     $('#new-list').on('click', '#lever-clear-filters', function() {
         console.log("clicked clear filters");
         jobList.filter();
         console.log("jobList filtered?", jobList.filtered);
         if (jobList.filtered == false) {
             hideFilterResults();
         }
         $('#lever-jobs-filter select').prop('selectedIndex',0);
         $('#lever-clear-filters').hide();
         $('#lever-no-results').hide();
     });
     // Showing/hiding search results when the search box is empty
     $('#new-list').on('input', '#lever-jobs-search', function() {
         if($(this).val().length || jobList.filtered == true) {
             showFilterResults();
             if (jobList.visibleItems.length >= 1) {
                 $('#lever-no-results').hide();
             } else {
                 $('#lever-no-results').show();
             }
         } else {
             hideFilterResults();
             $('#lever-no-results').hide();
         }
     });
 })
</script>
<script>
 window.loadLeverJobs = function (options) {
     //Checking for potential Lever source or origin parameters
     var pageUrl = window.location.href;
     var leverParameter = '';
     var trackingPrefix = '?lever-';
     options.accountName = options.accountName;
     // Define the container where we will put the content (or put in the body)
     var jobsContainer = document.getElementById("lever-jobs-container") || document.body;
     if( pageUrl.indexOf(trackingPrefix) >= 0){
         // Found Lever parameter
         var pageUrlSplit = pageUrl.split(trackingPrefix);
         leverParameter = '?lever-'+pageUrlSplit[1];
     }
     var htmlTagsToReplace = {
         '&': '&amp;',
         '<': '&lt;',
         '>': '&gt;'
     };
     function replaceTag(tag) {
         return htmlTagsToReplace[tag] || tag;
     }
     //For displaying titles that contain brackets in the 'append' function
     function sanitizeForHTML(str) {
         if (typeof str == 'undefined' ) {
             return '';
         }
         return str.replace(/[&<>]/g, replaceTag);
     }
     //Functions for checking if the variable is unspecified and removing script tags + null check
     //For making class names from department and team names
     function sanitizeAttribute(string) {
         if (string == '' || typeof string == 'undefined' ) {
             return 'uncategorized';
         }
         string = sanitizeForHTML(string);
         return string.replace(/\s+/ig, "");
     }
     // Adding the account name to the API URL
     var url = 'https://api.lever.co/v0/postings/'+ options.accountName +'?group=team&mode=json';
     //Create an object ordered by department and team
     function createJobs(responseData) {
         if (!responseData) return;
         //Older versions of IE might not interpret the data as a JSON object
         if(typeof responseData === "string") {
             responseData = JSON.parse(responseData);
         }
         var content = "";
         var groupedPostings = [];
         for(var i = 0; i < responseData.length; i++) {
             if (!responseData[i]) continue;
             if (!responseData[i].postings) continue;
             if (!(responseData[i].postings.length > 0)) continue;
             var title = sanitizeForHTML(responseData[i].title || 'Uncategorized');
             var titlesanitizeAttribute = sanitizeAttribute(title);
             for (j = 0; j < responseData[i].postings.length; j ++) {
                 var posting = responseData[i].postings[j];
                 var team = (posting.categories.team || 'Uncategorized' );
                 var teamsanitizeAttribute = sanitizeAttribute(team);
                 var department = (posting.categories.department || 'Uncategorized' );
                 var departmentsanitizeAttribute = sanitizeAttribute(department);
                 var link = posting.hostedUrl+leverParameter;
                 function findDepartment(element) {
                     return element.department == departmentsanitizeAttribute;
                 }
                 if (groupedPostings.findIndex(findDepartment) === -1) {
                     newDepartmentToAdd = {department : departmentsanitizeAttribute, departmentTitle: department, teams : [ {team: teamsanitizeAttribute, teamTitle: team, postings : []} ] };
                     groupedPostings.push(newDepartmentToAdd);
                 }
                 else {
                     departmentIndex = groupedPostings.findIndex(findDepartment);
                     newTeamToAdd = {team: teamsanitizeAttribute, teamTitle: team, postings : []};
                     if (groupedPostings[departmentIndex].teams.map(function(o) { return o.team; }).indexOf(teamsanitizeAttribute) === -1) {
                         groupedPostings[departmentIndex].teams.push(newTeamToAdd);
                     }
                 }
                 function findTeam(element) {
                     return element.team == teamsanitizeAttribute;
                 }
                 departmentIndex = groupedPostings.findIndex(findDepartment);
                 teamIndex = groupedPostings[departmentIndex].teams.findIndex(findTeam);
                 groupedPostings[departmentIndex].teams[teamIndex].postings.push(posting);
             }
         }
         // Sort by department
         groupedPostings.sort(function(a, b) {
             var departmentA=a.department.toLowerCase(), departmentB=b.department.toLowerCase()
             if (departmentA < departmentB)
                 return -1
             if (departmentA > departmentB)
                 return 1
             return 0
         });
         for(var i = 0; i < groupedPostings.length; i++) {
             // If there are no departments used, there is only one "unspecified" department, and we don't have to render that.
             if (groupedPostings.length >= 2) {
                 var haveDepartments = true;
             };
             if (haveDepartments) {
                 content += '<section class="lever-department" data-department="' + groupedPostings[i].departmentTitle + '"><h3 class="lever-department-title">' + sanitizeForHTML(groupedPostings[i].departmentTitle) + '</h3>';
             };
             for (j = 0; j < groupedPostings[i].teams.length; j ++) {
                 content += '<ul class="lever-team" data-team="' + groupedPostings[i].teams[j].teamTitle + '"><li><h4 class="lever-team-title">' + sanitizeForHTML(groupedPostings[i].teams[j].teamTitle) + '</h4><ul>';
                 for (var k = 0; k < groupedPostings[i].teams[j].postings.length; k ++) {
                     content += '<li class="lever-job" data-department="' + groupedPostings[i].departmentTitle +'" data-team="' + groupedPostings[i].teams[j].postings[k].categories.team + '" data-location="' + groupedPostings[i].teams[j].postings[k].categories.location + '"data-work-type="' + groupedPostings[i].teams[j].postings[k].categories.commitment + '">' +
                                '<div class=""><a class="lever-job-title" href="' + groupedPostings[i].teams[j].postings[k].hostedUrl + '">' + sanitizeForHTML(groupedPostings[i].teams[j].postings[k].text) + '</a><span class="lever-job-tag">' + (sanitizeForHTML(groupedPostings[i].teams[j].postings[k].categories.location) || '') + '</span></div>' + '<a  class=" apply-now-btn "href="' + groupedPostings[i].teams[j].postings[k].hostedUrl + '">' +  'Learn More' + '</a></li>';
                 }
                 content += '</ul></li></ul>';
             }
             if (haveDepartments) {
                 content += '</section>';
             };
         }
         content += '</ul>';
         jobsContainer.innerHTML = content;
         window.dispatchEvent(new Event('leverJobsRendered'));
     }
     if (options.includeCss) {
         function addCss(fileName) {
             var head = document.head
               , link = document.createElement('link');
             link.type = 'text/css';
             link.rel = 'stylesheet';
             link.href = fileName;
             head.appendChild(link);
         }
         addCss('https://andreasmb.github.io/lever-jobs-embed/embed-css/style.css');
     }
     var request = new XMLHttpRequest();
     request.open('GET', url, true);
     request.responseType = "json";
     request.onload = function() {
         if (request.status == 200) {
             createJobs(request.response);
         } else {
             console.log("Error fetching jobs.");
             jobsContainer.innerHTML = "<p class='lever-error'>Error fetching jobs.</p>";
         }
     };
     request.onerror = function() {
         console.log("Error fetching jobs.");
         jobsContainer.innerHTML = "<p class='lever-error'>Error fetching jobs.</p>";
     };
     request.send();
 };
 window.loadLeverJobs(window.leverJobsOptions);
 // IE polyfill for findIndex - found at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
 if (!Array.prototype.findIndex) {
     Object.defineProperty(Array.prototype, 'findIndex', {
         value: function(predicate) {
             // 1. Let O be ? ToObject(this value).
             if (this == null) {
                 throw new TypeError('"this" is null or not defined');
             }
             var o = Object(this);
             // 2. Let len be ? ToLength(? Get(O, "length")).
             var len = o.length >>> 0;
             // 3. If IsCallable(predicate) is false, throw a TypeError exception.
             if (typeof predicate !== 'function') {
                 throw new TypeError('predicate must be a function');
             }
             // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
             var thisArg = arguments[1];
             // 5. Let k be 0.
             var k = 0;
             // 6. Repeat, while k < len
             while (k < len) {
                 // a. Let Pk be ! ToString(k).
                 // b. Let kValue be ? Get(O, Pk).
                 // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                 // d. If testResult is true, return k.
                 var kValue = o[k];
                 if (predicate.call(thisArg, kValue, k, o)) {
                     return k;
                 }
                 // e. Increase k by 1.
                 k++;
             }
             // 7. Return -1.
             return -1;
         },
         configurable: true,
         writable: true
     });
 }
 // IE Polyfill for New Event
 (function () {
     if ( typeof window.CustomEvent === "function" ) return false;
     function CustomEvent ( event, params ) {
         params = params || { bubbles: false, cancelable: false, detail: undefined };
         var evt = document.createEvent( 'CustomEvent' );
         evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
         return evt;
     }
     CustomEvent.prototype = window.Event.prototype;
     window.CustomEvent = CustomEvent;
 })();
</script>
        </div>
        </div>
    </section>
{% endblock %}
